bez glowy
#include <stdio.h>
#include <stdlib.h>

struct element
{
    float x;
    struct element * next;
};

double srednia(struct element *Lista)
{
    struct element *temp = Lista;
    double suma = 0;
    int i=0;
    if(temp == NULL)
    {
        return 0;
    }
    while(temp!=NULL)
    {
        i++;
        suma = suma + temp->x;
        temp=temp->next;
    }
    return suma/i;
}

int main()
{
    struct element * lista1 = malloc(sizeof(struct element));
    lista1 -> x = 3.5;
    lista1 -> next = malloc(sizeof(struct element));
    lista1 -> next -> x = 5.5;
    lista1 -> next -> next = malloc(sizeof(struct element));
    lista1 -> next -> next -> x = 9;
    lista1 -> next -> next -> next = NULL;
    printf("%f", srednia(lista1));
    return 0;
}


z glowa
#include <stdio.h>
#include <stdlib.h>

struct element
{
    int i;
    struct element * next;
};

int main()
{
     //tworzymy głowę
     struct element * lista = malloc(sizeof(struct element));
     //pola i glowy nie ustawiamy
     lista->next= NULL; //następnik glowy jest na NULL, mamy zatem w tym miejscu pustą listę z głową
     //dodajemy pierwszy element na listę - w liscie z głową musimy go postawić po głowie
     struct element * wsk = malloc(sizeof(struct element)); // rezerwujemy miejsce w pamięci na jeden z elementów
     wsk->i=-4;
     wsk->next=lista->next; //tutaj teoretycznie można ustawić na NULL, ale zgodnie z konwencją trzeba ustawić pole next głowy
     lista->next=wsk; // ustawiamy nastepnik glowy jako wskaznik na nowy element
     // dodajemy nowy element na początek
     struct element * wsk2 = malloc(sizeof(struct element)); // rezerwujemy miejsce w pamięci na jeden z elementów
     wsk2->i=7;
     wsk2->next=lista->next; // następnik nowego elementu to nastepnik "głowy"
     lista->next=wsk2;  // ustawiamy następnik głowy jako wskaźnik na nowy element
     // dodajemy jeszcze jeden nowy element na początek
     struct element * wsk3 = malloc(sizeof(struct element)); // rezerwujemy miejsce w pamięci na jeden z elementów
     wsk3->i=5;
     wsk3->next=lista->next; // następnik nowego elementu to nastepnik "głowy"
     lista->next=wsk3;  // ustawiamy następnik głowy jako wskaźnik na nowy element
     //tu już mamy listę jak na rysunku - "głowa", pierwszy eleemnt to 5, drugi to 7, trzeci to i 4
     // teraz dodajemy 11 na początek
     struct element * wsk4 = malloc(sizeof(struct element)); // rezerwujemy miejsce w pamięci na jeden z elementów
     wsk4->i=11;
     wsk4->next=lista->next; // następnik nowego elementu to nastepnik "głowy"
     lista->next=wsk4;  // ustawiamy następnik głowy jako wskaźnik na nowy element
     return 0;
}


tablica tablic
int **rezerwacja(int n, int m)
{
    int **tab = (int**)malloc(sizeof(int*)*n);
    for(int i=0;i<n;i++)
    {
        *(tab+i)=(int*)malloc(sizeof(int)*m);
    }
    return tab;
}
